import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { 
    x: Number,        // Latitud del centro
    y: Number,        // Longitud del centro  
    data: String      // Datos de los cursos
  }

  connect() {
    // Coordenadas por defecto (San Jos√©, Costa Rica)
    const defaultLat = 9.9281;
    const defaultLng = -84.0907;
    
    // Usar las coordenadas del controlador o las por defecto
    const centerLat = this.xValue || defaultLat;
    const centerLng = this.yValue || defaultLng;
    
    // Inicializar el mapa
    this.map = L.map('map').setView([centerLat, centerLng], 13);

    // Agregar capa de tiles de OpenStreetMap
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(this.map);

    // Agregar marcadores de cursos si hay datos
    if (this.dataValue) {
      try {
        const coursesData = JSON.parse(this.dataValue);
        this.addCourseMarkers(coursesData);
      } catch (error) {
        console.error('Error parsing course data:', error);
      }
    }
  }

  addCourseMarkers(courses) {
    if (!courses || courses.length === 0) {
      console.log('No courses data available for markers');
      return;
    }

    courses.forEach(course => {
      if (course.x && course.y) {
        // Crear marcador
        const marker = L.marker([course.x, course.y])
          .addTo(this.map);
        
        // Agregar popup con el HTML del partial
        if (course.popupMessage) {
          marker.bindPopup(course.popupMessage, {
            maxWidth: 300,
            className: 'custom-popup'
          });
        }
      }
    });

    // Ajustar el zoom para mostrar todos los marcadores
    if (courses.length > 0) {
      const validCourses = courses.filter(course => course.x && course.y);
      if (validCourses.length > 0) {
        const group = new L.featureGroup(
          validCourses.map(course => L.marker([course.x, course.y]))
        );
        this.map.fitBounds(group.getBounds().pad(0.1));
      }
    }
  }

  disconnect() {
    if (this.map) {
      this.map.remove();
    }
  }
}